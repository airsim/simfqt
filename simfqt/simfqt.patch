Index: bom/FareRuleStruct.hpp
===================================================================
--- bom/FareRuleStruct.hpp	(revision 31)
+++ bom/FareRuleStruct.hpp	(working copy)
@@ -44,10 +44,7 @@
     stdair::hour_t _itHours;
     stdair::minute_t _itMinutes;
     stdair::second_t _itSeconds;
-
     
-    unsigned long int _nbOfAirlines;
-    
     /** Fare ID. */
     SIMFQT::FareQuoteID_T _fareId;
 
@@ -70,7 +67,7 @@
     stdair::Duration_T _timeRangeEnd;
     
      /** Point-of-sale. */
-    stdair::AirlineCode_T _pos;
+    stdair::AirportCode_T _pos;
     
     /** Channel distribution. */
     stdair::ChannelLabel_T _channel;
@@ -101,6 +98,9 @@
 
     /** Airline Code List*/
     stdair::AirlineCodeList_T _airlineCodeList;
+
+    /** Numbers of different Airline Codes*/
+    unsigned long int _nbOfAirlines;
     
     /** Class Code List*/
     stdair::ClassCodeList_T _classCodeList;
Index: bom/AirportPair.hpp
===================================================================
--- bom/AirportPair.hpp	(revision 0)
+++ bom/AirportPair.hpp	(revision 0)
@@ -0,0 +1,77 @@
+#ifndef __SIMFQT_BOM_AIRPORTPAIR_HPP
+#define __SIMFQT_BOM_AIRPORTPAIR_HPP
+
+// //////////////////////////////////////////////////////////////////////
+// Import section
+// //////////////////////////////////////////////////////////////////////
+// STDAIR
+#include <stdair/bom/BomAbstract.hpp>
+#include <stdair/STDAIR_Types.hpp>
+// SIMFQT
+#include <simfqt/bom/AirportPairKey.hpp>
+#include <simfqt/bom/AirportPairTypes.hpp>
+
+// Forward declaration
+namespace stdair {
+  template <typename BOM> class FacBom;
+  class FacBomManager;
+}
+
+namespace SIMFQT {
+
+  /** Class representing the actual attributes for an airline segment-period. */
+  class AirportPair : public stdair::BomAbstract {
+    template <typename BOM> friend class stdair::FacBom;
+    friend class stdair::FacBomManager;
+
+  public:
+    // Type definitions.
+    /** Definition allowing to retrieve the associated BOM key type. */
+    typedef AirportPairKey Key_T;
+  
+  public:
+    // /////////// Display support methods /////////
+    /** Dump a Business Object into an output stream.
+        @param ostream& the output stream. */
+    void toStream (std::ostream& ioOut) const { ioOut << toString(); }
+
+    /** Read a Business Object from an input stream.
+        @param istream& the input stream. */
+    void fromStream (std::istream& ioIn) { }
+
+   /** Get the serialised version of the Business Object. */
+    std::string toString() const;
+    
+    /** Get a string describing the  key. */
+    const std::string describeKey() const { return _key.toString(); }
+
+  public:
+    // ////////// Getters ////////////
+    const Key_T& getKey() const { return _key; }
+    const stdair::AirportCode_T& getBoardingPoint() const {
+      return _key.getBoardingPoint();
+    }
+    const stdair::AirportCode_T& getOffPoint() const {
+      return _key.getOffPoint();
+    }
+    stdair::BomAbstract* const getParent() const { return _parent; }
+    const  stdair::HolderMap_T& getHolderMap() const { return _holderMap; }
+    
+  protected:
+    /** Default constructors. */
+    AirportPair (const Key_T&);
+    AirportPair (const AirportPair&);
+    /** Destructor. */
+    ~AirportPair();
+
+  protected:
+    // Attributes
+    Key_T _key;
+    stdair::BomAbstract* _parent;
+    stdair::HolderMap_T _holderMap;
+
+  };
+
+}
+#endif // __SIMFQT_BOM_AIRPORTPAIR_HPP
+
Index: bom/AirportPairKey.cpp
===================================================================
--- bom/AirportPairKey.cpp	(revision 0)
+++ bom/AirportPairKey.cpp	(revision 0)
@@ -0,0 +1,40 @@
+// //////////////////////////////////////////////////////////////////////
+// Import section
+// //////////////////////////////////////////////////////////////////////
+// STDAIR
+#include <simfqt/bom/AirportPairKey.hpp>
+
+namespace SIMFQT  {
+
+  // ////////////////////////////////////////////////////////////////////
+  AirportPairKey::AirportPairKey (const stdair::AirportCode_T& iBoardingPoint,
+                                  const stdair::AirportCode_T& iOffPoint)
+    : _boardingPoint (iBoardingPoint), _offPoint (iOffPoint) {
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  AirportPairKey::AirportPairKey (const AirportPairKey& iKey)
+    : _boardingPoint (iKey._boardingPoint), _offPoint (iKey._offPoint) {
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  AirportPairKey::~AirportPairKey () {
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  void AirportPairKey::toStream (std::ostream& ioOut) const {
+    ioOut << "AirportPairKey: " << toString() << std::endl;
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  void AirportPairKey::fromStream (std::istream& ioIn) {
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  const std::string AirportPairKey::toString() const {
+    std::ostringstream oStr;
+    oStr << _boardingPoint << "-" << _offPoint;
+    return oStr.str();
+  }
+
+}
Index: bom/AirportPairTypes.hpp
===================================================================
--- bom/AirportPairTypes.hpp	(revision 0)
+++ bom/AirportPairTypes.hpp	(revision 0)
@@ -0,0 +1,30 @@
+// //////////////////////////////////////////////////////////////////////
+#ifndef __SIMFQT_BOM_AIPRPORTPAIRTYPES_HPP
+#define __SIMFQT_BOM_AIPRPORTPAIRTYPES_HPP
+
+// //////////////////////////////////////////////////////////////////////
+// Import section
+// //////////////////////////////////////////////////////////////////////
+// STL
+#include <map>
+#include <list>
+// SIMFQT
+#include <stdair/STDAIR_Types.hpp>
+
+namespace SIMFQT {
+
+  // Forward declarations.
+  class AirportPair;
+  
+  /** Define the airport-pair list. */
+  typedef std::list<AirportPair*> AirportPairList_T;
+
+  /** Define the airport-pair map. */
+  typedef std::map<const stdair::MapKey_T, AirportPair*> SegmentPeriodMap_T;
+
+  /** Define the list of pair<MapKey_T, AirportPair>. */
+  typedef std::pair<stdair::MapKey_T, AirportPair*> AirportPairWithKey_T;
+  typedef std::list<AirportPairWithKey_T> AirportPairDetailedList_T;
+}
+#endif // __SIMFQT_BOM_AIPRPORTPAIRTYPES_HPP
+
Index: bom/sources.mk
===================================================================
--- bom/sources.mk	(revision 31)
+++ bom/sources.mk	(working copy)
@@ -1,2 +1,10 @@
-simfqt_bom_h_sources = $(top_srcdir)/simfqt/bom/FareRuleStruct.hpp
-simfqt_bom_cc_sources = $(top_srcdir)/simfqt/bom/FareRuleStruct.cpp
+simfqt_bom_h_sources = \
+	$(top_srcdir)/simfqt/bom/FareRuleStruct.hpp \
+	$(top_srcdir)/simfqt/bom/AirportPairKey.hpp \
+	$(top_srcdir)/simfqt/bom/AirportPairTypes.hpp \
+	$(top_srcdir)/simfqt/bom/AirportPair.hpp
+simfqt_bom_cc_sources = \
+	$(top_srcdir)/simfqt/bom/FareRuleStruct.cpp \
+	$(top_srcdir)/simfqt/bom/AirportPairKey.cpp \
+	$(top_srcdir)/simfqt/bom/AirportPair.cpp
+
Index: bom/AirportPairKey.hpp
===================================================================
--- bom/AirportPairKey.hpp	(revision 0)
+++ bom/AirportPairKey.hpp	(revision 0)
@@ -0,0 +1,63 @@
+#ifndef __SIMFQT_BOM_AIRPORTPAIRKEY_HPP
+#define __SIMFQT_BOM_AIRPORTPAIRKEY_HPP
+
+// //////////////////////////////////////////////////////////////////////
+// Import section
+// //////////////////////////////////////////////////////////////////////
+// SIMFQT
+#include <stdair/bom/KeyAbstract.hpp>
+#include <stdair/STDAIR_Types.hpp>
+
+namespace SIMFQT  {
+  /** Key of segment-period. */
+  struct AirportPairKey : public stdair::KeyAbstract {
+
+  private:
+    // /////////// Default constructor //////////
+    AirportPairKey () { };
+  public:
+    // /////////// Construction ///////////
+    /** Constructors. */
+    AirportPairKey (const stdair::AirportCode_T&, const stdair::AirportCode_T&);
+    AirportPairKey (const AirportPairKey&);
+    /** Destructor. */
+    ~AirportPairKey ();
+    
+    // /////////// Getters //////////
+    /** Get the boardinging point. */
+    const stdair::AirportCode_T& getBoardingPoint() const {
+      return _boardingPoint;
+    }
+
+    /** Get the arrival point. */
+    const stdair::AirportCode_T& getOffPoint() const {
+      return _offPoint;
+    }
+    
+    // /////////// Display support methods /////////
+    /** Dump a Business Object Key into an output stream.
+        @param ostream& the output stream. */
+    void toStream (std::ostream& ioOut) const;
+
+    /** Read a Business Object Key from an input stream.
+        @param istream& the input stream. */
+    void fromStream (std::istream& ioIn);
+
+   /** Get the serialised version of the Business Object Key.
+       <br>That string is unique, at the level of a given Business Object,
+       when among children of a given parent Business Object.
+       <br>For instance, "H" and "K" allow to differentiate among two
+       marketing classes for the same segment-period. */
+    const std::string toString() const;
+
+  private:
+    // Attributes
+    /** Boardinging airport. */
+    stdair::AirportCode_T _boardingPoint;
+
+    /** Arrival airport. */
+    stdair::AirportCode_T _offPoint;
+  };
+
+}
+#endif // __SIMFQT_BOM_AIRPORTPAIRKEY_HPP
Index: bom/AirportPair.cpp
===================================================================
--- bom/AirportPair.cpp	(revision 0)
+++ bom/AirportPair.cpp	(revision 0)
@@ -0,0 +1,32 @@
+// //////////////////////////////////////////////////////////////////////
+// Import section
+// //////////////////////////////////////////////////////////////////////
+// STL
+#include <cassert>
+#include <sstream>
+// StdAir
+#include <stdair/basic/BasConst_General.hpp>
+#include <stdair/service/Logger.hpp>
+// SIMFQT
+#include <simfqt/bom/AirportPair.hpp>
+
+namespace SIMFQT {
+
+  // ////////////////////////////////////////////////////////////////////
+  AirportPair::AirportPair (const Key_T& iKey)
+    : _key (iKey), _parent (NULL)  {
+  }
+
+  // ////////////////////////////////////////////////////////////////////
+  AirportPair::~AirportPair () {
+  }
+  
+  // ////////////////////////////////////////////////////////////////////
+  std::string AirportPair::toString() const {
+    std::ostringstream oStr;
+    oStr << describeKey();
+    return oStr.str();
+  }
+}
+
+
Index: command/FareParserHelper.cpp
===================================================================
--- command/FareParserHelper.cpp	(revision 31)
+++ command/FareParserHelper.cpp	(working copy)
@@ -362,8 +362,8 @@
                                 boost::spirit::qi::unused_type,
                                 boost::spirit::qi::unused_type) const {
 
+      STDAIR_LOG_DEBUG ("Do End");
       // Generation of the fare rule object.
-      STDAIR_LOG_DEBUG ("Do End");
       FareRuleGenerator::createFareRule (_bomRoot, _fareRule);
     }  
 
Index: command/FareRuleGenerator.cpp
===================================================================
--- command/FareRuleGenerator.cpp	(revision 31)
+++ command/FareRuleGenerator.cpp	(working copy)
@@ -4,14 +4,13 @@
 // STL
 #include <cassert>
 // StdAir
-#include <stdair/basic/BasConst_BookingClass.hpp>
-#include <stdair/basic/BasConst_Yield.hpp>
-#include <stdair/basic/BasConst_General.hpp>
+#include <stdair/bom/BomManager.hpp>
 #include <stdair/bom/BomRoot.hpp>
-#include <stdair/command/CmdBomManager.hpp>
+#include <stdair/factory/FacBomManager.hpp>
 #include <stdair/service/Logger.hpp>
 // SIMFQT
 #include <simfqt/bom/FareRuleStruct.hpp>
+#include <simfqt/bom/AirportPair.hpp>
 #include <simfqt/command/FareRuleGenerator.hpp>
 
 namespace SIMFQT {
@@ -19,8 +18,44 @@
   // //////////////////////////////////////////////////////////////////////
   void FareRuleGenerator::
   createFareRule (stdair::BomRoot& ioBomRoot,
-                  const FareRuleStruct& iFareStruct) {
+                  const FareRuleStruct& iFareRuleStruct) {
+
+    // Set the segment-period primary key.
+    const stdair::AirportCode_T& lBoardPoint = iFareRuleStruct._origin;
+    const stdair::AirportCode_T& lOffPoint = iFareRuleStruct._destination;
+    const AirportPairKey lAirportPairKey (lBoardPoint, lOffPoint);
+  
+    // If the AirportPairKey object corresponding to the fare rule set
+    // having the same origin and destination airport does not exist, create
+    // it and link it to the ioBomRoot object.
+    AirportPair* lAirportPair_ptr = stdair::BomManager::
+      getObjectPtr<AirportPair> (ioBomRoot, lAirportPairKey.toString());
+    if (lAirportPair_ptr == NULL) {
+      lAirportPair_ptr =
+        &stdair::FacBom<AirportPair>::instance().create (lAirportPairKey);
+      stdair::FacBomManager::
+        instance().addToListAndMap (ioBomRoot, *lAirportPair_ptr);
+      stdair::FacBomManager::
+      instance().linkWithParent (ioBomRoot, *lAirportPair_ptr);
+    }
+    assert (lAirportPair_ptr != NULL);
+
+    const stdair::Date_T& lDateRangeStart = iFareRuleStruct._dateRangeStart;
+    const stdair::Date_T& lDateRangeEnd = iFareRuleStruct._dateRangeEnd;
+    const stdair::DatePeriod_T lDatePeriod (lDateRangeStart, lDateRangeEnd);
+
+    // const stdair::AirlineCode_T& lPos = iFareRuleStruct._pos;
+    // const stdair::Duration_T& lTimeRangeStart = iFareRuleStruct._timeRangeStart;
+    const stdair::Duration_T& lTimeRangeEnd = iFareRuleStruct._timeRangeEnd;
+    const stdair::AirlineCode_T& lPos = iFareRuleStruct._pos;
+    const stdair::ChannelLabel_T& lChannel = iFareRuleStruct._channel;
+    const stdair::DayDuration_T& lAdvancePurchase = iFareRuleStruct._advancePurchase;
+    const stdair::SaturdayStay_T& lSaturdayStay =iFareRuleStruct._saturdayStay;
+    const stdair::ChangeFees_T& lChangeFees = iFareRuleStruct._changeFees;
+    const stdair::NonRefundable_T& lNonRefundable = iFareRuleStruct._nonRefundable;
+    const stdair::DayDuration_T& lMinimumStay = iFareRuleStruct._minimumStay;
+    const stdair::Fare_T& lFare = iFareRuleStruct._fare;
     
-    
-  }    
+  }
+        
 }
