/*! 
\page users_guide Users Guide

\section ug_toc Table of Contents
- \ref ug_introduction
- \ref ug_get_started
  - \ref ug_get_source
  - \ref ug_build_binaries
  - \ref ug_build_and_run_tests
  - \ref ug_install_project
- \ref ug_inputfile
- \ref ug_bom_bom
 - \ref ug_bom_build 
 - \ref ug_bom_display 
 - \ref ug_bom_structure
- \ref ug_procedure 
 - \ref ug_procedure_bookingrequest
 - \ref ug_procedure_travelsolution
 - \ref ug_procedure_fareQuote 
- \ref ug_error_message
 - \ref ug_error_message_input_not_found
 - \ref ug_error_message_input_not_parsed
 - \ref ug_error_message_missing_fare_rule

\section ug_introduction Introduction

The \c SimFQT library contains classes for fare rule management.
This document does not cover all the aspects of the \c SimFQT library. It 
does however explain the most important things you need to know in order
to start using \c SimFQT. 

\section ug_get_started Get Started

\subsection ug_get_source Get the SimFQT library

Clone locally the full
<a href="http://simfqt.git.sourceforge.net/git/gitweb.cgi?p=simfqt/simfqt;a=tree;h=refs/heads/trunk;hb=trunk">Git project</a>:
\verbatim 
cd ~
mkdir -p dev/sim
cd ~/dev/sim
git clone git://simfqt.git.sourceforge.net/gitroot/simfqt/simfqt simfqtgit
cd simfqtgit
git checkout trunk
\endverbatim 

\subsection ug_build_binaries Build the SimFQT project

Link with StdAir, create the distribution package (say, 0.5.0) and compile 
using the following commands:
\verbatim 
cd ~/dev/sim/simfqtgit
rm -rf build && mkdir -p build
cd build
cmake -DCMAKE_INSTALL_PREFIX=~/dev/deliveries/simfqt-0.5.0 \
 -DWITH_STDAIR_PREFIX=~/dev/deliveries/stdair-stable \
 -DCMAKE_BUILD_TYPE:STRING=Debug -DINSTALL_DOC:BOOL=ON ..
make
\endverbatim 

\subsection ug_build_and_run_tests Run the Tests
After building the SimFQT project, the following commands run the tests:
\verbatim 
cd ~/dev/sim/simfqtgit
cd build
make check
\endverbatim 

As a result, you should obtain a similar report:

\verbatim 
[  0%] Built target hdr_cfg_simfqt
[ 90%] Built target simfqtlib
[100%] Built target FQTTestSuitetst
Test project /home/localoriuser/dev/sim/simfqt/simfqtgit/build/test/simfqt
    Start 1: FQTTestSuitetst
1/1 Test #1: FQTTestSuitetst ..................   Passed    0.15 sec

100% tests passed, 0 tests failed out of 1

Total Test time (real) =   0.16 sec
[100%] Built target check_simfqttst
[100%] Built target check
\endverbatim 

\subsection ug_install_project Install the SimFQT Project (Binaries, Documentation)

After the step \ref ug_build_binaries, to install the library and its header 
files, type:
\verbatim 
cd ~/dev/sim/simfqtgit
cd build
make install
\endverbatim

You can check that the executables and other required files have been copied 
into the given final directory: 

\verbatim 
cd ~dev/deliveries/simfqt-0.5.0
\endverbatim

To generate the SimFQT project documentation, the commands are:

\verbatim 
cd ~/dev/sim/simfqtgit
cd build
make doc
\endverbatim
The SimFQT project documentation is available in the following formats: HTML, 
LaTeX. 
Those documents are available in a subdirectory:

\verbatim 
cd ~/dev/sim/simfqtgit
cd build
cd doc
\endverbatim

\section ug_inputfile Input file of SimFQT Project 

The fare input file structure should look like the following sample:

\dontinclude fareInputFile.ref 
\until 10;

Each line represents a fare rule (see \c SIMFQT::FareRuleStruct), i.e., each 
line tells us the price a customer will be asked according to a lot of 
criteria such as:
- the origin and destination of his travel (for instance from Singapour to 
Bangok in the first fare rule).
- the type of his travel, i.e. one-way "OW" or round trip "RT".
- the date and time he is willing to travel (each fare rule has a date range 
and a time range of validity).
- the place where he is buying the ticket, i.e. the point of sale.
- his prefered cabin.
- the channel of the booking described by a two letters code: 
direct(D)/indirect(I) and online(N)/offline(F).
- the date when he wants to buy the ticket, i.e. the advanced purchase required
in number of days.
- the saturday night stay option, i.e. is he staying a staturday night between 
his inbound trip and his outbound one? "T" stands for true and "F" stands for 
false.
- the change fees option, i.e. are there fees to change his ticket? "T" stands 
for true and "F" stands for false.
- the refundable criterion, i.e. is the ticket refundable? "T" stands for true 
and "F" stands for false.
- the number of days he is willing to stay at the destination location (each 
fare rule has a minimum stay requirement in number of days).

Some fare input examples (including the example above named fare01.csv) are 
given in the stdair::samples directory.

\section ug_bom_bom The fare quoting BOM Tree

The Fare Quoting Business Object Model (BOM) tree is a structure permitting 
to store all the \c SIMFQT::FareRuleStruct objects of the simulation. That is 
why, the BOM tree is built parsing the fare file containing all the fare rules 
(as described in the previous section \ref ug_inputfile). For 
convenience and first use of SimFQT (the input fare file building can be long 
and heavy), SimFQT API enables to build a small default BOM tree.

\subsection ug_bom_build Build of the fare quoting BOM tree 

First, a BOM root object (i.e., a root for all the classes in the project) 
is instantiated by the <tt>stdair::STDAIR_ServiceContext</tt> context object,
when the <tt>stdair::STDAIR_Service</tt> is itself instantiated, that is to say 
during the instanciation of the <tt>simfqt::SIMFQT_Service</tt> object. The 
corresponding \c type (class) <tt>stdair::BomRoot</tt> is defined in the StdAir 
library.

Then, the BOM root can be either constructed thanks to the 
<tt>simfqt::SIMFQT_Service::buildSampleBom()</tt> method:

\dontinclude SIMFQT_Service.hpp
\skipline buildSampleBom

or can be constructed using the fare dump file described above thanks to the 
<tt> simfqt::SIMFQT_Service::parseAndLoad (const stdair::Filename_T&)</tt> 
method:

\dontinclude SIMFQT_Service.hpp
\skipline parseAndLoad 

\subsection ug_bom_display Display of the fare quoting BOM tree 

The fare quoting BOM tree can be displayed as done in the 
<tt>batches::simfqt.cpp</tt> program:
\dontinclude simfqt.cpp
\skipline lBOMCSVDump
\line lBOMCSVDump

When the default bom tree is used (<tt>-b</tt>
option of the main program <tt>simfqt.cpp</tt>), the fare quoting BOM tree 
display should look like:

\include bomTreeDisplay.ref

Here the fare quoting BOM tree is just composed of one fare rule.

\subsection ug_bom_structure Structure of the fare quoting BOM tree 

As one can guess looking at the BOM tree display above, the tree is constructed
 as follow:
- At the top of the tree, we find a <tt>stdair::BomRoot</tt> object (i.e., a 
root for all the classes in the project).
- Just under the root, at the first level, we find <tt>stdair::AirportPair</tt>
 objects (i.e., all the possible combinations of origin-destination). In the 
instance above, the only combination possible is from London to Sydney.
- At the next level, under a particular <tt>stdair::AirportPair</tt>, we find 
all the date periods of the fare rules applicable for this origin-destination.
- Then, under a particular <tt>stdair::DatePeriod</tt>, we find all the 
possible combinations of point-of-sale and channel applicable.
- Under a particular <tt>stdair::PosChannel</tt> object, we have the 
correponding <tt>stdair::TimePeriod</tt> objects.
- At the next-to-last level, we have <tt>stdair::FareFeatures</tt> objects, 
that is to say the trip type, the advanced purchase and stay duration required,
 ...
- Finally we find the code of the airline publishing the current fare rule and 
the applicable class code.

\section ug_procedure The fare quoting procedure

The project SimFQT aims at fare quoting a list of 
<a
href="http://stdair.sourceforge.net/TravelSolutionStruct_8hpp.html ">
travel solutions</a>
corresponding to a
<a
href="http://stdair.sourceforge.net/BookingRequestStruct_8hpp.html ">
booking request</a>.
The fare quoter looks for all the fare rules matching a travel solution: 
when a fare rule matches, it creates a  
<a
href="http://stdair.sourceforge.net/FareOptionStruct_8hpp.html">
fare option </a> object and adds this object to the current travel solution.

A few steps:
- \ref ug_procedure_bookingrequest
- \ref ug_procedure_travelsolution
- \ref ug_procedure_fareQuote

\subsection ug_procedure_bookingrequest Instanciate the default booking request

A default booking request can be built using the 
<tt>simfqt::SIMFQT_Service::buildBookingRequest</tt> method:
\dontinclude SIMFQT_Service.hpp
\skipline buildBookingRequest

\subsection ug_procedure_travelsolution Instanciate the default travel solution list

In the following sample, a list of travel solutions is given as input/output
parameter of the <tt>simfqt::SIMFQT_Service::buildSampleTravelSolutions</tt> 
method:
\skipline buildSampleTravelSolutions

\subsection ug_procedure_fareQuote Fare Quoting a list of travel solution

Once a booking request, its correponding list of travel solutions and the fare 
Quote BOM tree are constructed, the main fonction of the module can be called:

\skipline quotePrices
\line TravelSolutionList

For each travel solution of the list, the applicable fare rules are picked 
from the BOM tree (information such as the trip type or the booking request 
date are only contained into the booking request, that is why we need this 
object too).

Each chosen fare rule enables to create a fare option structure which is 
finally stored into the travel solution. 

\section ug_error_message Error Messages

This section lists the fatal errors you may encounter when using SimFQT:
- \ref ug_error_message_input_not_found
- \ref ug_error_message_input_not_parsed
- \ref ug_error_message_missing_fare_rule

\subsection ug_error_message_input_not_found Fare input file not found

In this case, the output error message will be similar to:
\verbatim 
terminate called after throwing an instance of 'SIMFQT::FareInputFileNotFoundException'
  what():  The fare input file '~/<YourFileName>.csv' does not exist or can not be read
Aborted
\endverbatim

You can check:
- the given path to your input file is correct.
- the specified file name <YourFileName> is correct.
- the file permission settings: is the file "readable"?.

\subsection ug_error_message_input_not_parsed Fare input file can not be parsed

This error message means that your input file has been opened but has not been 
fully read.
\verbatim 
terminate called after throwing an instance of 'SIMFQT::FareFileParsingFailedException'
  what():  Parsing of fare input file: ~/<YourFileName>.csv failed
Aborted
\endverbatim
Your input file structure is somehow incorrect. See the tutorial section 
\ref tut_how_build_fare_file.

\subsection ug_error_message_missing_fare_rule Error Messages for missing fare rules

If you obtain one of the error messages below and you are currently using your 
own input file, that means it has been fully read. However, at least one fare 
rule is missing to complete the fare quote.

- If your error message is about a missing airport pair, you should obtain a similar report:
\verbatim 
terminate called after throwing an instance of 'SIMFQT::AirportPairNotFoundException'
  what():  No available fare rule for the Origin-Destination pair: xxx, xxx
Aborted
\endverbatim
You need to be sure that all your travel solutions have at least one corresponding origin-destination fare rule.
It seems you should add one origin-destination (i.e., xxx, xxx) fare rule into your input file.

- If your error message is about a missing fare rule for a flight date, you should obtain a similar report:
\verbatim
terminate called after throwing an instance of 'SIMFQT::FlightDateNotFoundException'
  what():  No available fare rule for the flight date x, xxxx-xxx-xx and to the Origin-Destination pair: xxx, xxx
Aborted
\endverbatim
You need to be sure that all your travel solutions have at least one corresponding fare rule: same origin-destination and valid date range.
It seems you should add/change a fare rule with the Origin-Destination pair: xxx, xxx: its date range must include the flight date xxxx-xxx-xx.

- If your error message is about a missing fare rule for a point-of sale and/or channel, you should obtain a similar report:
\verbatim
terminate called after throwing an instance of 'SIMFQT::PosOrChannelNotFoundException'
  what():  No available fare rule for the point of sale xxx, the channel xx, the flight date x, xxxx-xxx-xx and the Origin-Destination pair: xxx, xxx
Aborted
\endverbatim
You need to be sure that all your travel solutions have at least one corresponding fare rule: same origin-destination, valid date range, same point-of-sale and same channel.
It seems you should add/change a fare rule to have the same combination as given in the output error message: "the point of sale xxx, the channel xx, the flight date x, xxxx-xxx-xx and the Origin-Destination pair: xxx, xxx".

- If your error message is about a missing fare rule for a flight time, you should obtain a similar report:
\verbatim
terminate called after throwing an instance of 'SIMFQT::FlightTimeNotFoundException'
  what():  No available fare rule corresponding to 'xx; x, xxxx-xxx-xx; xxx, xxx; xx:xx' (parsed key) and to 'xxx, xx' (POS and channel)
Aborted
\endverbatim
You need to be sure that all your travel solutions have at least one corresponding fare rule: same origin-destination, valid date range, same point-of-sale, same channel and valid time range. Add/change a fare rule if necessary.

- If your error message is about a missing fare rule for some features, you should obtain a similar report:
\verbatim
terminate called after throwing an instance of 'SIMFQT::FeaturesNotFoundException'
  what():  No available fare rule corresponding to a trip type xx, to a stay duration of x, to a request date time of xxxx-xxx-xx xx:xx:xx, to 'xx; x, xxxx-xxx-xx; xxx, xxx; xx:xx' (parsed key) and to 'xxx, xx' (POS and channel), to 'xx; x, xxxx-xxx-xx; xxx, xxx; xx:xx' (parsed key) and to 'xxx, xx' (POS and channel)
Aborted
\endverbatim
You need to be sure that all your travel solutions have at least one corresponding fare rule: same origin-destination, valid date range, same point-of-sale, same channel, valid time range and valid features.
The features are:
 - the trip type. Maybe you need both "OW" (One-Way) and "RT" (Round-trip) fare rules?
 - the minimum stay duration. You can try "0" for this parameter to include all the possible stay durations.
 - the advance purchase. You can try "0" for this parameter to include all the booking requests up to departure date.

-  If your error message is about a missing fare rule for an airline, you should obtain a similar report:
\verbatim
terminate called after throwing an instance of 'SIMFQT::AirlineNotFoundException'
  what():  No available fare rule corresponding to 'xx; x, xxxx-xxx-xx; xxx, xxx; xx:xx' (parsed key), to 'xxxx-xxx-xx xx:xx:xx, for (xxx, xx) xxx-xxx (xx) xxxx-xxx-xx (x days) xx:xx:xx x x x x x' (booking request) and to 'xxx, xx' (POS and channel)
Aborted
\endverbatim
At least one of your fare rules is correct except that the fare into question must be defined by the airline operating (see the first two letters of the parsed key in the error message to know which airline is operating).

*/
