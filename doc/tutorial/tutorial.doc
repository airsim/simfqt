/*! 
\page tutorials Tutorials

\section tut_toc Table of Contents
- \ref tut_configuration
- \ref tut_procedure
 - \ref tut_procedure_summary
 - \ref tut_procedure_results

\section tut_configuration Preparing the SimFQT Project for Development

The source code for these examples can be found in the
<tt>batches</tt> and <tt>test/simfqt</tt> directories. They are
compiled along with the rest of the \c SimFQT project. See the User
Guide (\ref users_guide) for more details on how to build the \c SimFQT
project.


\section tut_procedure Your first fareQuote

\subsection tut_procedure_summary Summary of the different steps

All the steps below can be find in the same order in the 
<tt>batches::simfqt.cpp</tt> program.

First, we instanciate the simfqtService object:

\dontinclude simfqt.cpp
\skipline logOutputFile
\skipline lLogParams
\skipline simfqtService

Then, we construct a default sample list of travel solutions and a default 
booking request (as already mentionned in \ref ug_procedure_bookingrequest and
 \ref ug_procedure_travelsolution parts):

\dontinclude simfqt.cpp
\skipline TravelSolutionList_T
\line lTravelSolutionList
\skipline BookingRequestStruct
\line simfqtService

Then, the objective is to construct the fareQuote bom tree (see \ref 
ug_bom_bom) from a fare rule input file:

\dontinclude simfqt.cpp
\skipline parseAndLoad (lFareInputFilename);

For basic use, a defaut BOM tree can be constructed using:
\dontinclude simfqt.cpp
\skipline buildSampleBom()

The main step is the fareQuoting (see \ref ug_procedure):
\dontinclude simfqt.cpp
\skipline quotePrices

\subsection tut_procedure_results Result of the Batch Program

When the <tt>simfqt.cpp</tt> program is run (with the <tt>-b</tt>
option), the output should look like:

\include simfqt.ref

What is interesting is to compare the travel solution list (here reduced to a 
single travel solution) display before:

\dontinclude simfqt.ref
\skipline [0]

and after the fareQuoting:

\skipline [0]

Between the two groups of dashes, wa can see a fare option structure has been 
added by the fare quoter: the price is 450 EUR for the Y class, the ticket is 
refundable but there are change fees and the customer must say on saturday 
night.

Let's return to our default BOM tree display: the only fare rule stored was a 
match for the travel solution in consideration (same origin airport, same 
destination airport, flight date included in fare rule date range, BA airline, 
...).

By looking at the fare rule trip type "RT", we can guess we face a round trip 
fare: that means the price given in the default bom tree construction in 
<tt>stdair::CmdBomManager.hpp</tt> has been divided by 2 because we are 
considering eigher an inbound trip or an outbound one.

See the corresponding full program (\ref batch_simfqt_cpp) for more details.

*/
